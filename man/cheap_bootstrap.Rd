% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cheap_bootstrap.R
\name{cheap_bootstrap}
\alias{cheap_bootstrap}
\title{Cheap subsampling}
\usage{
cheap_bootstrap(
  x,
  b = 20,
  m_val = NULL,
  alpha = 0.05,
  parallelize = FALSE,
  cores = parallel::detectCores(),
  data = NULL,
  progress_bar = TRUE,
  type = "subsampling"
)
}
\arguments{
\item{x}{A function that returns a vector of coefficients
or a model object which saves the call. In the second case, a
coef needs to be defined for 'class(x)'.}

\item{b}{Number of bootstrap samples.}

\item{m_val}{Subsample size. Defaults to 0.632 * nrow(data).}

\item{alpha}{Significance level. Defaults to 0.05.}

\item{parallelize}{Logical.
Should the bootstrap samples be computed in parallel?
Defaults to FALSE.}

\item{cores}{Number of cores to use for parallel computation, if parallelize = TRUE.
Defaults to detectCores().}

\item{data}{Data set to be used for the computation, if applicable.}

\item{progress_bar}{Logical. Should a progress bar be displayed? Defaults to TRUE.}

\item{type}{Character. Type of bootstrap method. Can be either "subsampling" or "non_parametric".
Defaults to "subsampling".}
}
\value{
An object of class "cheap_bootstrap" containing
the point estimates and confidence intervals.
}
\description{
Method implementing the cheap subsampling method for confidence intervals
}
\details{
Given a model object or a function that returns a vector of coefficients
and a data set,
this function computes confidence intervals using
the cheap subsampling method.
}
\examples{
\dontrun{
utils::data(anorexia, package = "MASS")
## example with a function call
set.seed(123)
x <- function(d) coef(lm(Postwt ~ Prewt + Treat + offset(Prewt), data = d))
cs <- cheap_bootstrap(x, b = 1000, data = anorexia)
cs

## example with a model object
set.seed(123)
x <- lm(Postwt ~ Prewt + Treat + offset(Prewt), data = anorexia)
cs2 <- cheap_bootstrap(x, b = 1000)
cs2

## example with a function call and parallel computation
set.seed(123)
x <- function(d) coef(lm(Postwt ~ Prewt + Treat + offset(Prewt), data = d))
cs3 <- cheap_bootstrap(x, b = 1000, data = anorexia, parallelize = TRUE)
cs3

## example with custom function returning coefficients 
## example from ATE-package
library(survival)
library(riskRegression)
set.seed(10)
#### Survival settings  ####
#### ATE with Cox model ####

## generate data

n <- 100
dtS <- sampleData(n, outcome="survival")
dtS$time <- round(dtS$time,1)
dtS$X1 <- factor(rbinom(n, prob = c(0.3,0.4) , size = 2), labels = paste0("T",0:2))

## estimate the Cox model
fit <- coxph(formula = Surv(time,event)~ X1+X2,data=dtS,y=TRUE,x=TRUE)
## fitter function which returns a named vector 
ate_fit_fun <- function(d) {
  ## main fitter function; ignore output
  invisible(capture.output(ate_fit <- summary(ate(fit, 
                                                  data = d, 
                                                  treatment = "X1", 
                                                  times = 5:8, 
                                                  se = FALSE))))
  ## extract the point estimates for risk difference
  res <- ate_fit$diffRisk$estimate
  ## name the point estimates
  names(res) <- paste0("ATE ",
                       ate_fit$diffRisk$A,
                       "-",
                       ate_fit$diffRisk$B, 
                       " (t = ",
                       ate_fit$diffRisk$time,")") 
  res
}
set.seed(102)
cs4 <- cheap_bootstrap(ate_fit_fun, b = 100, data = dtS)

## example from riskRegression with no existing coef function
set.seed(18)
learndat <- sampleData(200,outcome="binary")
testdat <- sampleData(1200,outcome="binary")

## score logistic regression models
lr1 = glm(Y~X1+X2+X7+X9,data=learndat,family=binomial)
lr2 = glm(Y~X3+X5,data=learndat,family=binomial)
z<-Score(list("LR(X1+X2+X7+X9)"=lr1,
         "LR(X3+X5)"=lr2),
         formula=Y~1,
         data=testdat,
         metrics = "AUC")
coef.Score <- function(x) {
  res <- x$AUC$score$AUC
  names(res) <- paste0("AUC (model = ", x$AUC$score$model, ")")
  res
}
set.seed(102)
cs5 <- cheap_bootstrap(z, b = 100)
}
}
